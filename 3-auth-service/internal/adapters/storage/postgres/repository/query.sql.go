// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO auth (
  "username", 
  "password", 
  "profile_public_id", 
  "email", 
  "country", 
  "profile_picture", 
  "email_verification_token"
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, username, password, profile_public_id, email, country, profile_picture, email_verification_token, email_verified, created_at, updated_at, password_reset_token, password_reset_expires
`

type CreateUserParams struct {
	Username               string
	Password               string
	ProfilePublicID        string
	Email                  string
	Country                string
	ProfilePicture         string
	EmailVerificationToken string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (Auth, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.ProfilePublicID,
		arg.Email,
		arg.Country,
		arg.ProfilePicture,
		arg.EmailVerificationToken,
	)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.ProfilePublicID,
		&i.Email,
		&i.Country,
		&i.ProfilePicture,
		&i.EmailVerificationToken,
		&i.EmailVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PasswordResetToken,
		&i.PasswordResetExpires,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, password, profile_public_id, email, country, profile_picture, email_verification_token, email_verified, created_at, updated_at, password_reset_token, password_reset_expires FROM auth
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (Auth, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.ProfilePublicID,
		&i.Email,
		&i.Country,
		&i.ProfilePicture,
		&i.EmailVerificationToken,
		&i.EmailVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PasswordResetToken,
		&i.PasswordResetExpires,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, password, profile_public_id, email, country, profile_picture, email_verification_token, email_verified, created_at, updated_at, password_reset_token, password_reset_expires FROM auth
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id int64) (Auth, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.ProfilePublicID,
		&i.Email,
		&i.Country,
		&i.ProfilePicture,
		&i.EmailVerificationToken,
		&i.EmailVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PasswordResetToken,
		&i.PasswordResetExpires,
	)
	return i, err
}

const getUserByPasswordToken = `-- name: GetUserByPasswordToken :one
SELECT id, username, password, profile_public_id, email, country, profile_picture, email_verification_token, email_verified, created_at, updated_at, password_reset_token, password_reset_expires FROM auth
WHERE password_reset_token = $1 AND password_reset_expires > NOW()
`

func (q *Queries) GetUserByPasswordToken(ctx context.Context, passwordResetToken pgtype.Text) (Auth, error) {
	row := q.db.QueryRow(ctx, getUserByPasswordToken, passwordResetToken)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.ProfilePublicID,
		&i.Email,
		&i.Country,
		&i.ProfilePicture,
		&i.EmailVerificationToken,
		&i.EmailVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PasswordResetToken,
		&i.PasswordResetExpires,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, password, profile_public_id, email, country, profile_picture, email_verification_token, email_verified, created_at, updated_at, password_reset_token, password_reset_expires FROM auth
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (Auth, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.ProfilePublicID,
		&i.Email,
		&i.Country,
		&i.ProfilePicture,
		&i.EmailVerificationToken,
		&i.EmailVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PasswordResetToken,
		&i.PasswordResetExpires,
	)
	return i, err
}

const getUserByVerificationToken = `-- name: GetUserByVerificationToken :one
SELECT id, username, password, profile_public_id, email, country, profile_picture, email_verification_token, email_verified, created_at, updated_at, password_reset_token, password_reset_expires FROM auth
WHERE email_verification_token = $1 AND email_verified = FALSE LIMIT 1
`

func (q *Queries) GetUserByVerificationToken(ctx context.Context, emailVerificationToken string) (Auth, error) {
	row := q.db.QueryRow(ctx, getUserByVerificationToken, emailVerificationToken)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.ProfilePublicID,
		&i.Email,
		&i.Country,
		&i.ProfilePicture,
		&i.EmailVerificationToken,
		&i.EmailVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PasswordResetToken,
		&i.PasswordResetExpires,
	)
	return i, err
}

const updateEmailVerificationToken = `-- name: UpdateEmailVerificationToken :execrows
UPDATE auth 
SET email_verification_token = $2, updated_at = NOW()
WHERE id = $1
`

type UpdateEmailVerificationTokenParams struct {
	ID                     int64
	EmailVerificationToken string
}

func (q *Queries) UpdateEmailVerificationToken(ctx context.Context, arg UpdateEmailVerificationTokenParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateEmailVerificationToken, arg.ID, arg.EmailVerificationToken)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const updatePasswordToken = `-- name: UpdatePasswordToken :exec
UPDATE auth 
SET 
  password_reset_token = $2, 
  password_reset_expires = $3,
  updated_at = NOW()
WHERE id = $1
`

type UpdatePasswordTokenParams struct {
	ID                   int64
	PasswordResetToken   pgtype.Text
	PasswordResetExpires pgtype.Timestamptz
}

func (q *Queries) UpdatePasswordToken(ctx context.Context, arg UpdatePasswordTokenParams) error {
	_, err := q.db.Exec(ctx, updatePasswordToken, arg.ID, arg.PasswordResetToken, arg.PasswordResetExpires)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE auth 
SET password = $2, password_reset_token = NULL, updated_at = NOW()
WHERE id = $1
`

type UpdateUserPasswordParams struct {
	ID       int64
	Password string
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.ID, arg.Password)
	return err
}

const updateVerifyEmailField = `-- name: UpdateVerifyEmailField :exec
UPDATE auth 
SET email_verified = $2, updated_at = NOW()
WHERE id = $1
`

type UpdateVerifyEmailFieldParams struct {
	ID            int64
	EmailVerified bool
}

func (q *Queries) UpdateVerifyEmailField(ctx context.Context, arg UpdateVerifyEmailFieldParams) error {
	_, err := q.db.Exec(ctx, updateVerifyEmailField, arg.ID, arg.EmailVerified)
	return err
}
