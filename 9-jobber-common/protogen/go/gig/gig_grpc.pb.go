// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: proto/gig/gig.proto

package gig

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GigServiceClient is the client API for GigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GigServiceClient interface {
	CreateGig(ctx context.Context, in *GigMessage, opts ...grpc.CallOption) (*GigResponse, error)
	UpdateGig(ctx context.Context, in *GigRequestUpdate, opts ...grpc.CallOption) (*GigResponse, error)
	GetGigById(ctx context.Context, in *GigRequestById, opts ...grpc.CallOption) (*GigResponse, error)
	DeleteGig(ctx context.Context, in *GigDeleteRequest, opts ...grpc.CallOption) (*GigMessageResponse, error)
	GetSellerGigs(ctx context.Context, in *GigRequestById, opts ...grpc.CallOption) (*GigsResponse, error)
	GetSellerPausedGigs(ctx context.Context, in *GigRequestById, opts ...grpc.CallOption) (*GigsResponse, error)
	UpdateActiveGig(ctx context.Context, in *GigUpdateActive, opts ...grpc.CallOption) (*GigResponse, error)
	SeedGigs(ctx context.Context, in *GigSeedRequest, opts ...grpc.CallOption) (*GigMessageResponse, error)
}

type gigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGigServiceClient(cc grpc.ClientConnInterface) GigServiceClient {
	return &gigServiceClient{cc}
}

func (c *gigServiceClient) CreateGig(ctx context.Context, in *GigMessage, opts ...grpc.CallOption) (*GigResponse, error) {
	out := new(GigResponse)
	err := c.cc.Invoke(ctx, "/gig.GigService/CreateGig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gigServiceClient) UpdateGig(ctx context.Context, in *GigRequestUpdate, opts ...grpc.CallOption) (*GigResponse, error) {
	out := new(GigResponse)
	err := c.cc.Invoke(ctx, "/gig.GigService/UpdateGig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gigServiceClient) GetGigById(ctx context.Context, in *GigRequestById, opts ...grpc.CallOption) (*GigResponse, error) {
	out := new(GigResponse)
	err := c.cc.Invoke(ctx, "/gig.GigService/GetGigById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gigServiceClient) DeleteGig(ctx context.Context, in *GigDeleteRequest, opts ...grpc.CallOption) (*GigMessageResponse, error) {
	out := new(GigMessageResponse)
	err := c.cc.Invoke(ctx, "/gig.GigService/DeleteGig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gigServiceClient) GetSellerGigs(ctx context.Context, in *GigRequestById, opts ...grpc.CallOption) (*GigsResponse, error) {
	out := new(GigsResponse)
	err := c.cc.Invoke(ctx, "/gig.GigService/GetSellerGigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gigServiceClient) GetSellerPausedGigs(ctx context.Context, in *GigRequestById, opts ...grpc.CallOption) (*GigsResponse, error) {
	out := new(GigsResponse)
	err := c.cc.Invoke(ctx, "/gig.GigService/GetSellerPausedGigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gigServiceClient) UpdateActiveGig(ctx context.Context, in *GigUpdateActive, opts ...grpc.CallOption) (*GigResponse, error) {
	out := new(GigResponse)
	err := c.cc.Invoke(ctx, "/gig.GigService/UpdateActiveGig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gigServiceClient) SeedGigs(ctx context.Context, in *GigSeedRequest, opts ...grpc.CallOption) (*GigMessageResponse, error) {
	out := new(GigMessageResponse)
	err := c.cc.Invoke(ctx, "/gig.GigService/SeedGigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GigServiceServer is the server API for GigService service.
// All implementations must embed UnimplementedGigServiceServer
// for forward compatibility
type GigServiceServer interface {
	CreateGig(context.Context, *GigMessage) (*GigResponse, error)
	UpdateGig(context.Context, *GigRequestUpdate) (*GigResponse, error)
	GetGigById(context.Context, *GigRequestById) (*GigResponse, error)
	DeleteGig(context.Context, *GigDeleteRequest) (*GigMessageResponse, error)
	GetSellerGigs(context.Context, *GigRequestById) (*GigsResponse, error)
	GetSellerPausedGigs(context.Context, *GigRequestById) (*GigsResponse, error)
	UpdateActiveGig(context.Context, *GigUpdateActive) (*GigResponse, error)
	SeedGigs(context.Context, *GigSeedRequest) (*GigMessageResponse, error)
	mustEmbedUnimplementedGigServiceServer()
}

// UnimplementedGigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGigServiceServer struct {
}

func (UnimplementedGigServiceServer) CreateGig(context.Context, *GigMessage) (*GigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGig not implemented")
}
func (UnimplementedGigServiceServer) UpdateGig(context.Context, *GigRequestUpdate) (*GigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGig not implemented")
}
func (UnimplementedGigServiceServer) GetGigById(context.Context, *GigRequestById) (*GigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGigById not implemented")
}
func (UnimplementedGigServiceServer) DeleteGig(context.Context, *GigDeleteRequest) (*GigMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGig not implemented")
}
func (UnimplementedGigServiceServer) GetSellerGigs(context.Context, *GigRequestById) (*GigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSellerGigs not implemented")
}
func (UnimplementedGigServiceServer) GetSellerPausedGigs(context.Context, *GigRequestById) (*GigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSellerPausedGigs not implemented")
}
func (UnimplementedGigServiceServer) UpdateActiveGig(context.Context, *GigUpdateActive) (*GigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateActiveGig not implemented")
}
func (UnimplementedGigServiceServer) SeedGigs(context.Context, *GigSeedRequest) (*GigMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SeedGigs not implemented")
}
func (UnimplementedGigServiceServer) mustEmbedUnimplementedGigServiceServer() {}

// UnsafeGigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GigServiceServer will
// result in compilation errors.
type UnsafeGigServiceServer interface {
	mustEmbedUnimplementedGigServiceServer()
}

func RegisterGigServiceServer(s grpc.ServiceRegistrar, srv GigServiceServer) {
	s.RegisterService(&GigService_ServiceDesc, srv)
}

func _GigService_CreateGig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GigMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GigServiceServer).CreateGig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gig.GigService/CreateGig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GigServiceServer).CreateGig(ctx, req.(*GigMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _GigService_UpdateGig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GigRequestUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GigServiceServer).UpdateGig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gig.GigService/UpdateGig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GigServiceServer).UpdateGig(ctx, req.(*GigRequestUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _GigService_GetGigById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GigRequestById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GigServiceServer).GetGigById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gig.GigService/GetGigById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GigServiceServer).GetGigById(ctx, req.(*GigRequestById))
	}
	return interceptor(ctx, in, info, handler)
}

func _GigService_DeleteGig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GigDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GigServiceServer).DeleteGig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gig.GigService/DeleteGig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GigServiceServer).DeleteGig(ctx, req.(*GigDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GigService_GetSellerGigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GigRequestById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GigServiceServer).GetSellerGigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gig.GigService/GetSellerGigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GigServiceServer).GetSellerGigs(ctx, req.(*GigRequestById))
	}
	return interceptor(ctx, in, info, handler)
}

func _GigService_GetSellerPausedGigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GigRequestById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GigServiceServer).GetSellerPausedGigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gig.GigService/GetSellerPausedGigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GigServiceServer).GetSellerPausedGigs(ctx, req.(*GigRequestById))
	}
	return interceptor(ctx, in, info, handler)
}

func _GigService_UpdateActiveGig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GigUpdateActive)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GigServiceServer).UpdateActiveGig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gig.GigService/UpdateActiveGig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GigServiceServer).UpdateActiveGig(ctx, req.(*GigUpdateActive))
	}
	return interceptor(ctx, in, info, handler)
}

func _GigService_SeedGigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GigSeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GigServiceServer).SeedGigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gig.GigService/SeedGigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GigServiceServer).SeedGigs(ctx, req.(*GigSeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GigService_ServiceDesc is the grpc.ServiceDesc for GigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gig.GigService",
	HandlerType: (*GigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGig",
			Handler:    _GigService_CreateGig_Handler,
		},
		{
			MethodName: "UpdateGig",
			Handler:    _GigService_UpdateGig_Handler,
		},
		{
			MethodName: "GetGigById",
			Handler:    _GigService_GetGigById_Handler,
		},
		{
			MethodName: "DeleteGig",
			Handler:    _GigService_DeleteGig_Handler,
		},
		{
			MethodName: "GetSellerGigs",
			Handler:    _GigService_GetSellerGigs_Handler,
		},
		{
			MethodName: "GetSellerPausedGigs",
			Handler:    _GigService_GetSellerPausedGigs_Handler,
		},
		{
			MethodName: "UpdateActiveGig",
			Handler:    _GigService_UpdateActiveGig_Handler,
		},
		{
			MethodName: "SeedGigs",
			Handler:    _GigService_SeedGigs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/gig/gig.proto",
}

// GigSearchClient is the client API for GigSearch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GigSearchClient interface {
	SearchGig(ctx context.Context, in *GigSearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	SearchGigCategory(ctx context.Context, in *SearchGigByValue, opts ...grpc.CallOption) (*SearchResponse, error)
	SearchGigTop(ctx context.Context, in *SearchGigByValue, opts ...grpc.CallOption) (*SearchResponse, error)
	SearchGigSimilar(ctx context.Context, in *SearchGigByValue, opts ...grpc.CallOption) (*SearchResponse, error)
}

type gigSearchClient struct {
	cc grpc.ClientConnInterface
}

func NewGigSearchClient(cc grpc.ClientConnInterface) GigSearchClient {
	return &gigSearchClient{cc}
}

func (c *gigSearchClient) SearchGig(ctx context.Context, in *GigSearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/gig.GigSearch/SearchGig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gigSearchClient) SearchGigCategory(ctx context.Context, in *SearchGigByValue, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/gig.GigSearch/SearchGigCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gigSearchClient) SearchGigTop(ctx context.Context, in *SearchGigByValue, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/gig.GigSearch/SearchGigTop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gigSearchClient) SearchGigSimilar(ctx context.Context, in *SearchGigByValue, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/gig.GigSearch/SearchGigSimilar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GigSearchServer is the server API for GigSearch service.
// All implementations must embed UnimplementedGigSearchServer
// for forward compatibility
type GigSearchServer interface {
	SearchGig(context.Context, *GigSearchRequest) (*SearchResponse, error)
	SearchGigCategory(context.Context, *SearchGigByValue) (*SearchResponse, error)
	SearchGigTop(context.Context, *SearchGigByValue) (*SearchResponse, error)
	SearchGigSimilar(context.Context, *SearchGigByValue) (*SearchResponse, error)
	mustEmbedUnimplementedGigSearchServer()
}

// UnimplementedGigSearchServer must be embedded to have forward compatible implementations.
type UnimplementedGigSearchServer struct {
}

func (UnimplementedGigSearchServer) SearchGig(context.Context, *GigSearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchGig not implemented")
}
func (UnimplementedGigSearchServer) SearchGigCategory(context.Context, *SearchGigByValue) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchGigCategory not implemented")
}
func (UnimplementedGigSearchServer) SearchGigTop(context.Context, *SearchGigByValue) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchGigTop not implemented")
}
func (UnimplementedGigSearchServer) SearchGigSimilar(context.Context, *SearchGigByValue) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchGigSimilar not implemented")
}
func (UnimplementedGigSearchServer) mustEmbedUnimplementedGigSearchServer() {}

// UnsafeGigSearchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GigSearchServer will
// result in compilation errors.
type UnsafeGigSearchServer interface {
	mustEmbedUnimplementedGigSearchServer()
}

func RegisterGigSearchServer(s grpc.ServiceRegistrar, srv GigSearchServer) {
	s.RegisterService(&GigSearch_ServiceDesc, srv)
}

func _GigSearch_SearchGig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GigSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GigSearchServer).SearchGig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gig.GigSearch/SearchGig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GigSearchServer).SearchGig(ctx, req.(*GigSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GigSearch_SearchGigCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchGigByValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GigSearchServer).SearchGigCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gig.GigSearch/SearchGigCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GigSearchServer).SearchGigCategory(ctx, req.(*SearchGigByValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _GigSearch_SearchGigTop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchGigByValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GigSearchServer).SearchGigTop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gig.GigSearch/SearchGigTop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GigSearchServer).SearchGigTop(ctx, req.(*SearchGigByValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _GigSearch_SearchGigSimilar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchGigByValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GigSearchServer).SearchGigSimilar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gig.GigSearch/SearchGigSimilar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GigSearchServer).SearchGigSimilar(ctx, req.(*SearchGigByValue))
	}
	return interceptor(ctx, in, info, handler)
}

// GigSearch_ServiceDesc is the grpc.ServiceDesc for GigSearch service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GigSearch_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gig.GigSearch",
	HandlerType: (*GigSearchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchGig",
			Handler:    _GigSearch_SearchGig_Handler,
		},
		{
			MethodName: "SearchGigCategory",
			Handler:    _GigSearch_SearchGigCategory_Handler,
		},
		{
			MethodName: "SearchGigTop",
			Handler:    _GigSearch_SearchGigTop_Handler,
		},
		{
			MethodName: "SearchGigSimilar",
			Handler:    _GigSearch_SearchGigSimilar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/gig/gig.proto",
}
