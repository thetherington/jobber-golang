// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: proto/order/notification.proto

package order

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotificationServiceClient is the client API for NotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationServiceClient interface {
	GetNotificationsById(ctx context.Context, in *RequestWithParam, opts ...grpc.CallOption) (*NotificationsResponse, error)
	MarkNotificationAsRead(ctx context.Context, in *RequestWithParam, opts ...grpc.CallOption) (*NotificationResponse, error)
	SubscribeNotify(ctx context.Context, in *RequestWithParam, opts ...grpc.CallOption) (NotificationService_SubscribeNotifyClient, error)
	UnsubscribeNotify(ctx context.Context, in *RequestWithParam, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type notificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationServiceClient(cc grpc.ClientConnInterface) NotificationServiceClient {
	return &notificationServiceClient{cc}
}

func (c *notificationServiceClient) GetNotificationsById(ctx context.Context, in *RequestWithParam, opts ...grpc.CallOption) (*NotificationsResponse, error) {
	out := new(NotificationsResponse)
	err := c.cc.Invoke(ctx, "/order.NotificationService/GetNotificationsById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) MarkNotificationAsRead(ctx context.Context, in *RequestWithParam, opts ...grpc.CallOption) (*NotificationResponse, error) {
	out := new(NotificationResponse)
	err := c.cc.Invoke(ctx, "/order.NotificationService/MarkNotificationAsRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) SubscribeNotify(ctx context.Context, in *RequestWithParam, opts ...grpc.CallOption) (NotificationService_SubscribeNotifyClient, error) {
	stream, err := c.cc.NewStream(ctx, &NotificationService_ServiceDesc.Streams[0], "/order.NotificationService/SubscribeNotify", opts...)
	if err != nil {
		return nil, err
	}
	x := &notificationServiceSubscribeNotifyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NotificationService_SubscribeNotifyClient interface {
	Recv() (*NotificationMessage, error)
	grpc.ClientStream
}

type notificationServiceSubscribeNotifyClient struct {
	grpc.ClientStream
}

func (x *notificationServiceSubscribeNotifyClient) Recv() (*NotificationMessage, error) {
	m := new(NotificationMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *notificationServiceClient) UnsubscribeNotify(ctx context.Context, in *RequestWithParam, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/order.NotificationService/UnsubscribeNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServiceServer is the server API for NotificationService service.
// All implementations must embed UnimplementedNotificationServiceServer
// for forward compatibility
type NotificationServiceServer interface {
	GetNotificationsById(context.Context, *RequestWithParam) (*NotificationsResponse, error)
	MarkNotificationAsRead(context.Context, *RequestWithParam) (*NotificationResponse, error)
	SubscribeNotify(*RequestWithParam, NotificationService_SubscribeNotifyServer) error
	UnsubscribeNotify(context.Context, *RequestWithParam) (*emptypb.Empty, error)
	mustEmbedUnimplementedNotificationServiceServer()
}

// UnimplementedNotificationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNotificationServiceServer struct {
}

func (UnimplementedNotificationServiceServer) GetNotificationsById(context.Context, *RequestWithParam) (*NotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationsById not implemented")
}
func (UnimplementedNotificationServiceServer) MarkNotificationAsRead(context.Context, *RequestWithParam) (*NotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkNotificationAsRead not implemented")
}
func (UnimplementedNotificationServiceServer) SubscribeNotify(*RequestWithParam, NotificationService_SubscribeNotifyServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeNotify not implemented")
}
func (UnimplementedNotificationServiceServer) UnsubscribeNotify(context.Context, *RequestWithParam) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsubscribeNotify not implemented")
}
func (UnimplementedNotificationServiceServer) mustEmbedUnimplementedNotificationServiceServer() {}

// UnsafeNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationServiceServer will
// result in compilation errors.
type UnsafeNotificationServiceServer interface {
	mustEmbedUnimplementedNotificationServiceServer()
}

func RegisterNotificationServiceServer(s grpc.ServiceRegistrar, srv NotificationServiceServer) {
	s.RegisterService(&NotificationService_ServiceDesc, srv)
}

func _NotificationService_GetNotificationsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWithParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).GetNotificationsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.NotificationService/GetNotificationsById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).GetNotificationsById(ctx, req.(*RequestWithParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_MarkNotificationAsRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWithParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).MarkNotificationAsRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.NotificationService/MarkNotificationAsRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).MarkNotificationAsRead(ctx, req.(*RequestWithParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_SubscribeNotify_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestWithParam)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotificationServiceServer).SubscribeNotify(m, &notificationServiceSubscribeNotifyServer{stream})
}

type NotificationService_SubscribeNotifyServer interface {
	Send(*NotificationMessage) error
	grpc.ServerStream
}

type notificationServiceSubscribeNotifyServer struct {
	grpc.ServerStream
}

func (x *notificationServiceSubscribeNotifyServer) Send(m *NotificationMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _NotificationService_UnsubscribeNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestWithParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).UnsubscribeNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.NotificationService/UnsubscribeNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).UnsubscribeNotify(ctx, req.(*RequestWithParam))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationService_ServiceDesc is the grpc.ServiceDesc for NotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.NotificationService",
	HandlerType: (*NotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNotificationsById",
			Handler:    _NotificationService_GetNotificationsById_Handler,
		},
		{
			MethodName: "MarkNotificationAsRead",
			Handler:    _NotificationService_MarkNotificationAsRead_Handler,
		},
		{
			MethodName: "UnsubscribeNotify",
			Handler:    _NotificationService_UnsubscribeNotify_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeNotify",
			Handler:       _NotificationService_SubscribeNotify_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/order/notification.proto",
}
