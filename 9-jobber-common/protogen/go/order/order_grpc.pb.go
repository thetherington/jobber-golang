// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: proto/order/order.proto

package order

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	Create(ctx context.Context, in *OrderDocument, opts ...grpc.CallOption) (*OrderResponse, error)
	Intent(ctx context.Context, in *PaymentIntentRequest, opts ...grpc.CallOption) (*PaymentIntentResponse, error)
	GetOrderById(ctx context.Context, in *RequestById, opts ...grpc.CallOption) (*OrderResponse, error)
	GetSellerOrders(ctx context.Context, in *RequestById, opts ...grpc.CallOption) (*OrdersResponse, error)
	GetBuyerOrders(ctx context.Context, in *RequestById, opts ...grpc.CallOption) (*OrdersResponse, error)
	RequestExtension(ctx context.Context, in *DeliveryExtensionRequest, opts ...grpc.CallOption) (*OrderResponse, error)
	DeliveryDate(ctx context.Context, in *DeliveryDateRequest, opts ...grpc.CallOption) (*OrderResponse, error)
	DeliverOrder(ctx context.Context, in *DeliverOrderRequest, opts ...grpc.CallOption) (*OrderResponse, error)
	CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	ApproveOrder(ctx context.Context, in *ApproveOrderRequest, opts ...grpc.CallOption) (*OrderResponse, error)
	SubscribeOrder(ctx context.Context, in *RequestById, opts ...grpc.CallOption) (OrderService_SubscribeOrderClient, error)
	UnsubscribeOrder(ctx context.Context, in *RequestById, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) Create(ctx context.Context, in *OrderDocument, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, "/order.OrderService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) Intent(ctx context.Context, in *PaymentIntentRequest, opts ...grpc.CallOption) (*PaymentIntentResponse, error) {
	out := new(PaymentIntentResponse)
	err := c.cc.Invoke(ctx, "/order.OrderService/Intent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrderById(ctx context.Context, in *RequestById, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, "/order.OrderService/GetOrderById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetSellerOrders(ctx context.Context, in *RequestById, opts ...grpc.CallOption) (*OrdersResponse, error) {
	out := new(OrdersResponse)
	err := c.cc.Invoke(ctx, "/order.OrderService/GetSellerOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetBuyerOrders(ctx context.Context, in *RequestById, opts ...grpc.CallOption) (*OrdersResponse, error) {
	out := new(OrdersResponse)
	err := c.cc.Invoke(ctx, "/order.OrderService/GetBuyerOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) RequestExtension(ctx context.Context, in *DeliveryExtensionRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, "/order.OrderService/RequestExtension", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) DeliveryDate(ctx context.Context, in *DeliveryDateRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, "/order.OrderService/DeliveryDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) DeliverOrder(ctx context.Context, in *DeliverOrderRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, "/order.OrderService/DeliverOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/order.OrderService/CancelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) ApproveOrder(ctx context.Context, in *ApproveOrderRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, "/order.OrderService/ApproveOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) SubscribeOrder(ctx context.Context, in *RequestById, opts ...grpc.CallOption) (OrderService_SubscribeOrderClient, error) {
	stream, err := c.cc.NewStream(ctx, &OrderService_ServiceDesc.Streams[0], "/order.OrderService/SubscribeOrder", opts...)
	if err != nil {
		return nil, err
	}
	x := &orderServiceSubscribeOrderClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OrderService_SubscribeOrderClient interface {
	Recv() (*OrderDocument, error)
	grpc.ClientStream
}

type orderServiceSubscribeOrderClient struct {
	grpc.ClientStream
}

func (x *orderServiceSubscribeOrderClient) Recv() (*OrderDocument, error) {
	m := new(OrderDocument)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orderServiceClient) UnsubscribeOrder(ctx context.Context, in *RequestById, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/order.OrderService/UnsubscribeOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations must embed UnimplementedOrderServiceServer
// for forward compatibility
type OrderServiceServer interface {
	Create(context.Context, *OrderDocument) (*OrderResponse, error)
	Intent(context.Context, *PaymentIntentRequest) (*PaymentIntentResponse, error)
	GetOrderById(context.Context, *RequestById) (*OrderResponse, error)
	GetSellerOrders(context.Context, *RequestById) (*OrdersResponse, error)
	GetBuyerOrders(context.Context, *RequestById) (*OrdersResponse, error)
	RequestExtension(context.Context, *DeliveryExtensionRequest) (*OrderResponse, error)
	DeliveryDate(context.Context, *DeliveryDateRequest) (*OrderResponse, error)
	DeliverOrder(context.Context, *DeliverOrderRequest) (*OrderResponse, error)
	CancelOrder(context.Context, *CancelOrderRequest) (*MessageResponse, error)
	ApproveOrder(context.Context, *ApproveOrderRequest) (*OrderResponse, error)
	SubscribeOrder(*RequestById, OrderService_SubscribeOrderServer) error
	UnsubscribeOrder(context.Context, *RequestById) (*emptypb.Empty, error)
	mustEmbedUnimplementedOrderServiceServer()
}

// UnimplementedOrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderServiceServer struct {
}

func (UnimplementedOrderServiceServer) Create(context.Context, *OrderDocument) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedOrderServiceServer) Intent(context.Context, *PaymentIntentRequest) (*PaymentIntentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Intent not implemented")
}
func (UnimplementedOrderServiceServer) GetOrderById(context.Context, *RequestById) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderById not implemented")
}
func (UnimplementedOrderServiceServer) GetSellerOrders(context.Context, *RequestById) (*OrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSellerOrders not implemented")
}
func (UnimplementedOrderServiceServer) GetBuyerOrders(context.Context, *RequestById) (*OrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuyerOrders not implemented")
}
func (UnimplementedOrderServiceServer) RequestExtension(context.Context, *DeliveryExtensionRequest) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestExtension not implemented")
}
func (UnimplementedOrderServiceServer) DeliveryDate(context.Context, *DeliveryDateRequest) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeliveryDate not implemented")
}
func (UnimplementedOrderServiceServer) DeliverOrder(context.Context, *DeliverOrderRequest) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeliverOrder not implemented")
}
func (UnimplementedOrderServiceServer) CancelOrder(context.Context, *CancelOrderRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (UnimplementedOrderServiceServer) ApproveOrder(context.Context, *ApproveOrderRequest) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveOrder not implemented")
}
func (UnimplementedOrderServiceServer) SubscribeOrder(*RequestById, OrderService_SubscribeOrderServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeOrder not implemented")
}
func (UnimplementedOrderServiceServer) UnsubscribeOrder(context.Context, *RequestById) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsubscribeOrder not implemented")
}
func (UnimplementedOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderDocument)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).Create(ctx, req.(*OrderDocument))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_Intent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentIntentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).Intent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/Intent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).Intent(ctx, req.(*PaymentIntentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/GetOrderById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrderById(ctx, req.(*RequestById))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetSellerOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetSellerOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/GetSellerOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetSellerOrders(ctx, req.(*RequestById))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetBuyerOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetBuyerOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/GetBuyerOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetBuyerOrders(ctx, req.(*RequestById))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_RequestExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliveryExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).RequestExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/RequestExtension",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).RequestExtension(ctx, req.(*DeliveryExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_DeliveryDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliveryDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).DeliveryDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/DeliveryDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).DeliveryDate(ctx, req.(*DeliveryDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_DeliverOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliverOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).DeliverOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/DeliverOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).DeliverOrder(ctx, req.(*DeliverOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CancelOrder(ctx, req.(*CancelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_ApproveOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).ApproveOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/ApproveOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).ApproveOrder(ctx, req.(*ApproveOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_SubscribeOrder_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestById)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrderServiceServer).SubscribeOrder(m, &orderServiceSubscribeOrderServer{stream})
}

type OrderService_SubscribeOrderServer interface {
	Send(*OrderDocument) error
	grpc.ServerStream
}

type orderServiceSubscribeOrderServer struct {
	grpc.ServerStream
}

func (x *orderServiceSubscribeOrderServer) Send(m *OrderDocument) error {
	return x.ServerStream.SendMsg(m)
}

func _OrderService_UnsubscribeOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).UnsubscribeOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/UnsubscribeOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).UnsubscribeOrder(ctx, req.(*RequestById))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _OrderService_Create_Handler,
		},
		{
			MethodName: "Intent",
			Handler:    _OrderService_Intent_Handler,
		},
		{
			MethodName: "GetOrderById",
			Handler:    _OrderService_GetOrderById_Handler,
		},
		{
			MethodName: "GetSellerOrders",
			Handler:    _OrderService_GetSellerOrders_Handler,
		},
		{
			MethodName: "GetBuyerOrders",
			Handler:    _OrderService_GetBuyerOrders_Handler,
		},
		{
			MethodName: "RequestExtension",
			Handler:    _OrderService_RequestExtension_Handler,
		},
		{
			MethodName: "DeliveryDate",
			Handler:    _OrderService_DeliveryDate_Handler,
		},
		{
			MethodName: "DeliverOrder",
			Handler:    _OrderService_DeliverOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _OrderService_CancelOrder_Handler,
		},
		{
			MethodName: "ApproveOrder",
			Handler:    _OrderService_ApproveOrder_Handler,
		},
		{
			MethodName: "UnsubscribeOrder",
			Handler:    _OrderService_UnsubscribeOrder_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeOrder",
			Handler:       _OrderService_SubscribeOrder_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/order/order.proto",
}
