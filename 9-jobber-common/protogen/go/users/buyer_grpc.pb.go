// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: proto/users/buyer.proto

package users

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BuyerServiceClient is the client API for BuyerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BuyerServiceClient interface {
	GetBuyerByEmail(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BuyerPayload, error)
	GetBuyerByUsername(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BuyerPayload, error)
	GetBuyerByProvidedUsername(ctx context.Context, in *BuyerUsernameRequest, opts ...grpc.CallOption) (*BuyerPayload, error)
}

type buyerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBuyerServiceClient(cc grpc.ClientConnInterface) BuyerServiceClient {
	return &buyerServiceClient{cc}
}

func (c *buyerServiceClient) GetBuyerByEmail(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BuyerPayload, error) {
	out := new(BuyerPayload)
	err := c.cc.Invoke(ctx, "/users.BuyerService/GetBuyerByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buyerServiceClient) GetBuyerByUsername(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BuyerPayload, error) {
	out := new(BuyerPayload)
	err := c.cc.Invoke(ctx, "/users.BuyerService/GetBuyerByUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buyerServiceClient) GetBuyerByProvidedUsername(ctx context.Context, in *BuyerUsernameRequest, opts ...grpc.CallOption) (*BuyerPayload, error) {
	out := new(BuyerPayload)
	err := c.cc.Invoke(ctx, "/users.BuyerService/GetBuyerByProvidedUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuyerServiceServer is the server API for BuyerService service.
// All implementations must embed UnimplementedBuyerServiceServer
// for forward compatibility
type BuyerServiceServer interface {
	GetBuyerByEmail(context.Context, *emptypb.Empty) (*BuyerPayload, error)
	GetBuyerByUsername(context.Context, *emptypb.Empty) (*BuyerPayload, error)
	GetBuyerByProvidedUsername(context.Context, *BuyerUsernameRequest) (*BuyerPayload, error)
	mustEmbedUnimplementedBuyerServiceServer()
}

// UnimplementedBuyerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBuyerServiceServer struct {
}

func (UnimplementedBuyerServiceServer) GetBuyerByEmail(context.Context, *emptypb.Empty) (*BuyerPayload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuyerByEmail not implemented")
}
func (UnimplementedBuyerServiceServer) GetBuyerByUsername(context.Context, *emptypb.Empty) (*BuyerPayload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuyerByUsername not implemented")
}
func (UnimplementedBuyerServiceServer) GetBuyerByProvidedUsername(context.Context, *BuyerUsernameRequest) (*BuyerPayload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuyerByProvidedUsername not implemented")
}
func (UnimplementedBuyerServiceServer) mustEmbedUnimplementedBuyerServiceServer() {}

// UnsafeBuyerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BuyerServiceServer will
// result in compilation errors.
type UnsafeBuyerServiceServer interface {
	mustEmbedUnimplementedBuyerServiceServer()
}

func RegisterBuyerServiceServer(s grpc.ServiceRegistrar, srv BuyerServiceServer) {
	s.RegisterService(&BuyerService_ServiceDesc, srv)
}

func _BuyerService_GetBuyerByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuyerServiceServer).GetBuyerByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.BuyerService/GetBuyerByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuyerServiceServer).GetBuyerByEmail(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuyerService_GetBuyerByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuyerServiceServer).GetBuyerByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.BuyerService/GetBuyerByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuyerServiceServer).GetBuyerByUsername(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuyerService_GetBuyerByProvidedUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyerUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuyerServiceServer).GetBuyerByProvidedUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.BuyerService/GetBuyerByProvidedUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuyerServiceServer).GetBuyerByProvidedUsername(ctx, req.(*BuyerUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BuyerService_ServiceDesc is the grpc.ServiceDesc for BuyerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BuyerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "users.BuyerService",
	HandlerType: (*BuyerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBuyerByEmail",
			Handler:    _BuyerService_GetBuyerByEmail_Handler,
		},
		{
			MethodName: "GetBuyerByUsername",
			Handler:    _BuyerService_GetBuyerByUsername_Handler,
		},
		{
			MethodName: "GetBuyerByProvidedUsername",
			Handler:    _BuyerService_GetBuyerByProvidedUsername_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/users/buyer.proto",
}
