// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: proto/users/seller.proto

package users

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SellerServiceClient is the client API for SellerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SellerServiceClient interface {
	CreateSeller(ctx context.Context, in *CreateUpdateSellerPayload, opts ...grpc.CallOption) (*SellerResponse, error)
	UpdateSeller(ctx context.Context, in *UpdateSellerRequest, opts ...grpc.CallOption) (*SellerResponse, error)
	GetSellerById(ctx context.Context, in *GetSellerByIdRequest, opts ...grpc.CallOption) (*SellerResponse, error)
	GetSellerByUsername(ctx context.Context, in *GetSellerByUsernameRequest, opts ...grpc.CallOption) (*SellerResponse, error)
	GetRandomSellers(ctx context.Context, in *RandomSellersRequest, opts ...grpc.CallOption) (*SellersResponse, error)
	SeedSellers(ctx context.Context, in *SeedSellersRequest, opts ...grpc.CallOption) (*SeedSellerResponse, error)
}

type sellerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSellerServiceClient(cc grpc.ClientConnInterface) SellerServiceClient {
	return &sellerServiceClient{cc}
}

func (c *sellerServiceClient) CreateSeller(ctx context.Context, in *CreateUpdateSellerPayload, opts ...grpc.CallOption) (*SellerResponse, error) {
	out := new(SellerResponse)
	err := c.cc.Invoke(ctx, "/users.SellerService/CreateSeller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerServiceClient) UpdateSeller(ctx context.Context, in *UpdateSellerRequest, opts ...grpc.CallOption) (*SellerResponse, error) {
	out := new(SellerResponse)
	err := c.cc.Invoke(ctx, "/users.SellerService/UpdateSeller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerServiceClient) GetSellerById(ctx context.Context, in *GetSellerByIdRequest, opts ...grpc.CallOption) (*SellerResponse, error) {
	out := new(SellerResponse)
	err := c.cc.Invoke(ctx, "/users.SellerService/GetSellerById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerServiceClient) GetSellerByUsername(ctx context.Context, in *GetSellerByUsernameRequest, opts ...grpc.CallOption) (*SellerResponse, error) {
	out := new(SellerResponse)
	err := c.cc.Invoke(ctx, "/users.SellerService/GetSellerByUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerServiceClient) GetRandomSellers(ctx context.Context, in *RandomSellersRequest, opts ...grpc.CallOption) (*SellersResponse, error) {
	out := new(SellersResponse)
	err := c.cc.Invoke(ctx, "/users.SellerService/GetRandomSellers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerServiceClient) SeedSellers(ctx context.Context, in *SeedSellersRequest, opts ...grpc.CallOption) (*SeedSellerResponse, error) {
	out := new(SeedSellerResponse)
	err := c.cc.Invoke(ctx, "/users.SellerService/SeedSellers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SellerServiceServer is the server API for SellerService service.
// All implementations must embed UnimplementedSellerServiceServer
// for forward compatibility
type SellerServiceServer interface {
	CreateSeller(context.Context, *CreateUpdateSellerPayload) (*SellerResponse, error)
	UpdateSeller(context.Context, *UpdateSellerRequest) (*SellerResponse, error)
	GetSellerById(context.Context, *GetSellerByIdRequest) (*SellerResponse, error)
	GetSellerByUsername(context.Context, *GetSellerByUsernameRequest) (*SellerResponse, error)
	GetRandomSellers(context.Context, *RandomSellersRequest) (*SellersResponse, error)
	SeedSellers(context.Context, *SeedSellersRequest) (*SeedSellerResponse, error)
	mustEmbedUnimplementedSellerServiceServer()
}

// UnimplementedSellerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSellerServiceServer struct {
}

func (UnimplementedSellerServiceServer) CreateSeller(context.Context, *CreateUpdateSellerPayload) (*SellerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSeller not implemented")
}
func (UnimplementedSellerServiceServer) UpdateSeller(context.Context, *UpdateSellerRequest) (*SellerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSeller not implemented")
}
func (UnimplementedSellerServiceServer) GetSellerById(context.Context, *GetSellerByIdRequest) (*SellerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSellerById not implemented")
}
func (UnimplementedSellerServiceServer) GetSellerByUsername(context.Context, *GetSellerByUsernameRequest) (*SellerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSellerByUsername not implemented")
}
func (UnimplementedSellerServiceServer) GetRandomSellers(context.Context, *RandomSellersRequest) (*SellersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomSellers not implemented")
}
func (UnimplementedSellerServiceServer) SeedSellers(context.Context, *SeedSellersRequest) (*SeedSellerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SeedSellers not implemented")
}
func (UnimplementedSellerServiceServer) mustEmbedUnimplementedSellerServiceServer() {}

// UnsafeSellerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SellerServiceServer will
// result in compilation errors.
type UnsafeSellerServiceServer interface {
	mustEmbedUnimplementedSellerServiceServer()
}

func RegisterSellerServiceServer(s grpc.ServiceRegistrar, srv SellerServiceServer) {
	s.RegisterService(&SellerService_ServiceDesc, srv)
}

func _SellerService_CreateSeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUpdateSellerPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerServiceServer).CreateSeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.SellerService/CreateSeller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerServiceServer).CreateSeller(ctx, req.(*CreateUpdateSellerPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerService_UpdateSeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSellerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerServiceServer).UpdateSeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.SellerService/UpdateSeller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerServiceServer).UpdateSeller(ctx, req.(*UpdateSellerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerService_GetSellerById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSellerByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerServiceServer).GetSellerById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.SellerService/GetSellerById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerServiceServer).GetSellerById(ctx, req.(*GetSellerByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerService_GetSellerByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSellerByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerServiceServer).GetSellerByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.SellerService/GetSellerByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerServiceServer).GetSellerByUsername(ctx, req.(*GetSellerByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerService_GetRandomSellers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RandomSellersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerServiceServer).GetRandomSellers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.SellerService/GetRandomSellers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerServiceServer).GetRandomSellers(ctx, req.(*RandomSellersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerService_SeedSellers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeedSellersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerServiceServer).SeedSellers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.SellerService/SeedSellers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerServiceServer).SeedSellers(ctx, req.(*SeedSellersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SellerService_ServiceDesc is the grpc.ServiceDesc for SellerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SellerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "users.SellerService",
	HandlerType: (*SellerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSeller",
			Handler:    _SellerService_CreateSeller_Handler,
		},
		{
			MethodName: "UpdateSeller",
			Handler:    _SellerService_UpdateSeller_Handler,
		},
		{
			MethodName: "GetSellerById",
			Handler:    _SellerService_GetSellerById_Handler,
		},
		{
			MethodName: "GetSellerByUsername",
			Handler:    _SellerService_GetSellerByUsername_Handler,
		},
		{
			MethodName: "GetRandomSellers",
			Handler:    _SellerService_GetRandomSellers_Handler,
		},
		{
			MethodName: "SeedSellers",
			Handler:    _SellerService_SeedSellers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/users/seller.proto",
}
